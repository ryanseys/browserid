#!/usr/bin/env node

var
path = require('path')
resources = require('../lib/static_resources.js'),
config = require('../lib/configuration.js'),
generate_version_js = require('../lib/generate_code_version.js'),
i18n = require('i18n-abide'),
mkdirp = require('mkdirp'),
computecluster = require('compute-cluster'),
version = require('../lib/version.js');

const staticPath = path.join(__dirname, '..', 'resources', 'static');

var langs = config.get('supported_languages');

generate_version_js(function(err) {
  if (err) {
    console.error("Could not generate the code version, aborting: " 
        + String(err));
    process.exit(1);
  }

  var all = resources.all(langs);

  var cc = new computecluster({
    module: path.join(__dirname, 'compress-worker.js'),
    max_backlog: -1
  });

  process.env['BUILD_DIR'] = path.join(staticPath, "build");
  mkdirp.sync(process.env['BUILD_DIR']);

  // generate include.js
  require('./create_include.js')(function(err) {
    if (err) console.error("Could not generate include.js, aborting: " 
          + String(err));
    process.exit(1);
  });

  // first we'll "generate templates" - which is to concatenate
  // a bunch of ejs into a javascript file
  // NOTE: env setting could be cleaned up here, this is like this to minimally
  // change things during migration of compress{,-locales}.sh to javascript
  process.env['TEMPLATE_DIR'] = path.join(staticPath, "dialog", "views");
  require('./create_templates.js')();
  require('./create_font_css.js')();

  var leftToBuild = Object.keys(all).length;
  var errors = 0;

  // bidbundle.js is a dependency for any module that includes crypto-loader.js
  // build it first so a SHA can be calculated.
  enqueueResource("/production/bidbundle.js", function() {
    delete all["/production/bidbundle.js"];

    Object.keys(all).forEach(function(resource) {
      // in dev, '/shared/templates.js' creates an empty object and templates
      // are fetched on demand.
      // in prod '/build/templates.js' has all templates glommed into it,
      // and is bundled into the Big Minified Piles Of Resources we ship.
      // Here we sub the former with the latter.
      var ix = all[resource].indexOf('/common/js/templates.js');
      if (ix !== -1) all[resource].splice(ix, 1, '/build/templates.js');

      // in dev, language specific font-css files are generated by the 
      // connect-fonts middleware. 
      // in prod, '*/fonts.css' files are pre-built for each language and 
      // combined with the rest of the bundle. Re-point location to fetch the 
      // font.css file from the prod location to the pre-built location.
      for(var idx = 0, item; item=all[resource][idx]; idx++) {
        if(/fonts\.css$/.test(item)) {
          all[resource][idx] = "/build" + item;
        }
      }

      // remove translation files from default and debug languages.  #1905
      [ config.get('debug_lang'), config.get('default_lang') ].forEach(function(l) {
        var file = '/i18n/' + i18n.localeFrom(l) + '/client.js';
        var ix = all[resource].indexOf(file);
        if (-1 !== ix) all[resource].splice(ix, 1);
      });

      enqueueResource(resource, function() {
        if (!leftToBuild) {
          cc.exit();
          if (errors) process.exit(1);
        }
      });
    });
  });

  function enqueueResource(resource, done) {
    cc.enqueue({
      file: resource,
      deps: all[resource],
      staticPath: staticPath
    }, function(err, r) {
      if (err || r.error) {
        console.log("failed to build", resource,":", err || r.error);
        errors++;
      } else {
        console.log("built", resource, "in", r.time + "s" + (r.info ? " (" + r.info + ")" : ""));
      }
      leftToBuild--
      done && done();
    });
  }


});
